/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chuks.report.processor.factory;

import com.chuks.report.processor.ChartProcessor;
import com.chuks.report.processor.chart.*;
import com.chuks.report.processor.handler.*;
import com.chuks.report.processor.param.*;

/**
 *
 * @author Chuks Alimele<chuksalimele at yahoo.com>
 */
public class TestChartProc extends javax.swing.JFrame {

    /**
     * Creates new form TestChartProc
     */
    public TestChartProc() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFXPanel1 = new javafx.embed.swing.JFXPanel();
        cmdPieChart = new javax.swing.JButton();
        cmdBarChart = new javax.swing.JButton();
        cmdLineChart = new javax.swing.JButton();
        cmdAreaChart = new javax.swing.JButton();
        cmdBubbleChart = new javax.swing.JButton();
        cmdScatterChart = new javax.swing.JButton();
        cmdStackedBarChart = new javax.swing.JButton();
        cmdStackedAreaChart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmdPieChart.setText("Pie chart");
        cmdPieChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPieChartActionPerformed(evt);
            }
        });

        cmdBarChart.setText("Bar chart");
        cmdBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBarChartActionPerformed(evt);
            }
        });

        cmdLineChart.setText("Line chart");
        cmdLineChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLineChartActionPerformed(evt);
            }
        });

        cmdAreaChart.setText("Area chart");
        cmdAreaChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAreaChartActionPerformed(evt);
            }
        });

        cmdBubbleChart.setText("Bubble chart");
        cmdBubbleChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBubbleChartActionPerformed(evt);
            }
        });

        cmdScatterChart.setText("Scatter chart");
        cmdScatterChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdScatterChartActionPerformed(evt);
            }
        });

        cmdStackedBarChart.setText("Stacked bar chart");
        cmdStackedBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStackedBarChartActionPerformed(evt);
            }
        });

        cmdStackedAreaChart.setText("Stacked area chart");
        cmdStackedAreaChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStackedAreaChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(cmdPieChart)
                .addGap(18, 18, 18)
                .addComponent(cmdBarChart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdStackedBarChart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdLineChart)
                .addGap(18, 18, 18)
                .addComponent(cmdAreaChart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdStackedAreaChart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBubbleChart)
                .addGap(18, 18, 18)
                .addComponent(cmdScatterChart)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jFXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdPieChart)
                    .addComponent(cmdBarChart)
                    .addComponent(cmdLineChart)
                    .addComponent(cmdAreaChart)
                    .addComponent(cmdBubbleChart)
                    .addComponent(cmdScatterChart)
                    .addComponent(cmdStackedBarChart)
                    .addComponent(cmdStackedAreaChart))
                .addContainerGap(459, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(51, Short.MAX_VALUE)
                    .addComponent(jFXPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int pie_increase = 0;
    boolean flag;
    private void cmdPieChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPieChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new PieChartInputHandler() {

            @Override
            public void onShow(PieChartInput input, PieChartSettings settings) {

                input.plot("aaa", 10 + (pie_increase += 5));
                input.plot("bbb", 30);
                input.plot("ccc", 60);
                if (flag) {
                    input.plot("ddd", 20 + (pie_increase += 2));
                    input.plot("eee", 12 + (pie_increase += 4));
                }
                flag = !flag;
                //input.setPollingEnabled(false);

            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdPieChartActionPerformed

    int increase1 = 0;
    int increase2 = 0;

    private void cmdBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBarChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new BarChartInputHandler() {

            @Override
            public void onShow(BarChartInput input, BarChartSettings settings) {
                increase1++;
                increase2 += 2;
                input.plotNewSeries("series 1");
                input.plot("a", 1 + increase1);
                input.plot("b", 2 + increase2);
                input.plot("c", 3);

                input.plotNewSeries("series 2");
                input.plot("a", 1);
                input.plot("b", 2 + increase1);
                input.plot("c", 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdBarChartActionPerformed

    private void cmdLineChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLineChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new LineChartInputHandler() {

            @Override
            public void onShow(LineChartInput input, LineChartSettings settings) {

                input.plotNewSeries("series 1");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.plotNewSeries("series 2");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdLineChartActionPerformed

    private void cmdAreaChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAreaChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new AreaChartInputHandler() {

            @Override
            public void onShow(AreaChartInput input, AreaChartSettings settings) {

                input.plotNewSeries("series 1");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.plotNewSeries("series 2");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdAreaChartActionPerformed

    private void cmdBubbleChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBubbleChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new BubbleChartInputHandler() {

            @Override
            public void onShow(BubbleChartInput input, BubbleChartSettings settings) {

                input.plotNewSeries("series 1");
                input.plot(1, 1);
                input.plot(2, 2);
                input.plot(3, 3);

                input.plotNewSeries("series 2");
                input.plot(2, 1);
                input.plot(3, 2);
                input.plot(4, 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdBubbleChartActionPerformed

    private void cmdScatterChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdScatterChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new ScatterChartInputHandler() {

            @Override
            public void onShow(ScatterChartInput input, ScatterChartSettings settings) {

                input.plotNewSeries("series 1");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.plotNewSeries("series 2");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdScatterChartActionPerformed

    private void cmdStackedBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStackedBarChartActionPerformed

        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new StackedBarChartInputHandler() {

            @Override
            public void onShow(StackedBarChartInput input, StackedBarChartSettings settings) {

                input.plotNewSeries("series 1");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.plotNewSeries("series 2");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
    }//GEN-LAST:event_cmdStackedBarChartActionPerformed

    private void cmdStackedAreaChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStackedAreaChartActionPerformed
        
        ChartProcessor c = ProcessorFactory.getChartProcessor();
        c.loadChart(new StackedAreaChartInputHandler() {

            @Override
            public void onShow(StackedAreaChartInput input, StackedAreaChartSettings settings) {

                input.plotNewSeries("series 1");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.plotNewSeries("series 2");
                input.plot("a", 1);
                input.plot("b", 2);
                input.plot("c", 3);

                input.setChartTitle("Test Chart");

                input.setLabelX("The x axis");
                input.setLabelY("The y axis");

                //input.setPollingEnabled(false);
            }
        }, jFXPanel1);
        
    }//GEN-LAST:event_cmdStackedAreaChartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestChartProc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TestChartProc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAreaChart;
    private javax.swing.JButton cmdBarChart;
    private javax.swing.JButton cmdBubbleChart;
    private javax.swing.JButton cmdLineChart;
    private javax.swing.JButton cmdPieChart;
    private javax.swing.JButton cmdScatterChart;
    private javax.swing.JButton cmdStackedAreaChart;
    private javax.swing.JButton cmdStackedBarChart;
    private javafx.embed.swing.JFXPanel jFXPanel1;
    // End of variables declaration//GEN-END:variables

}
